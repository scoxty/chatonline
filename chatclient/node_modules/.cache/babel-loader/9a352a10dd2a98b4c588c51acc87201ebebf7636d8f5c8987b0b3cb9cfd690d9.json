{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport request from \"@/utils/request\";\nimport emojis from \"@/assets/emoji\";\nimport axios from 'axios';\nlet client;\nlet mediaRecorder;\nlet audioChunks = [];\nlet audioContext, analyser, microphone, javascriptNode;\nexport default {\n  data() {\n    return {\n      user: {},\n      permission: [],\n      emojis: [],\n      messages: [],\n      users: {},\n      fromUser: \"\",\n      toUser: \"\",\n      toAvatar: \"\",\n      unRead: {},\n      id: \"\",\n      recordingStatus: 'idle',\n      recordingTime: 0,\n      recordingInterval: null,\n      audioLevels: []\n    };\n  },\n  // 页面加载的时候，做一些事情，在created里面\n  mounted() {\n    this.emojis = emojis.split(\",\");\n    this.user = JSON.parse(localStorage.getItem(\"user\") || \"{}\");\n    this.fromUser = this.user.role + \"_\" + this.user.name;\n    client = new WebSocket(`ws://localhost:8080/imserverSingle`);\n    client.onopen = () => {\n      console.log(\"websocket open\");\n    };\n    client.onclose = () => {\n      // 页面刷新的时候和后台websocket服务关闭的时候\n      console.log(\"websocket close\");\n    };\n    client.onmessage = msg => {\n      if (msg.data) {\n        let json = JSON.parse(msg.data);\n        if (json.content && json.fromuser === this.fromUser && json.touser === this.toUser || json.touser === this.fromUser && json.fromuser === this.toUser) {\n          // 聊天消息\n          this.messages.push(json);\n          this.scrollToBottom(); // 滚动页面到最底部\n        }\n        // 加载消息数字\n        if (this.toUser === json.fromuser) {\n          this.setUnReadNums(); // 清空正在聊天人的消息数字\n        } else {\n          this.loadUnReadNums();\n        }\n      }\n    };\n\n    // 加载聊天数据\n    this.load();\n    request.get(\"/hy/list\", {\n      params: {\n        pageNum: 1,\n        pageSize: 1000\n      }\n    }).then(res => {\n      if (res.data && res.data.list) {\n        this.$set(this.users, \"admin\", res.data.list);\n      } else {\n        console.error(\"Failed to load user list\");\n      }\n    });\n\n    // 添加键盘事件监听\n    window.addEventListener('keydown', this.handleKeyDown);\n    window.addEventListener('keyup', this.handleKeyUp);\n  },\n  beforeDestroy() {\n    if (client) {\n      client.close();\n    }\n    // 移除键盘事件监听\n    window.removeEventListener('keydown', this.handleKeyDown);\n    window.removeEventListener('keyup', this.handleKeyUp);\n  },\n  // 定义一些页面上控件触发的事件调用的方法\n  methods: {\n    load() {\n      request.get(\"/imsingle?fromUser=\" + this.fromUser + \"&toUser=\" + this.toUser).then(res => {\n        if (res.code === \"0\") {\n          console.log(res);\n          this.messages = res.data;\n          this.scrollToBottom(); // 滚动条滚动到最底部\n        } else {\n          this.$notify.error(res.msg);\n        }\n        this.loadUnReadNums();\n      });\n    },\n    setUnReadNums() {\n      request.get(\"/imsingle?fromUser=\" + this.fromUser + \"&toUser=\" + this.toUser).then(res => {\n        this.loadUnReadNums();\n      });\n    },\n    loadUnReadNums() {\n      // 查询未读数量\n      request.get(\"/imsingle/unReadNums?toUsername=\" + this.fromUser).then(res => {\n        this.unRead = res.data;\n      });\n    },\n    send() {\n      if (!this.toUser) {\n        this.$notify.error(\"请选择聊天用户\");\n        return;\n      }\n      if (client) {\n        let message = this.getMessage(\"text\");\n        client.send(JSON.stringify(message));\n      }\n      document.getElementById(\"im-content\").innerHTML = \"\"; // 清空输入框\n    },\n    selectToUser(item) {\n      this.toUser = item.role + \"_\" + item.userName;\n      this.toAvatar = item.userAvatar;\n      //查询聊天记录\n      this.load();\n    },\n    download(file) {\n      window.open(file);\n    },\n    getMessage(type) {\n      let inputBox = document.getElementById(\"im-content\");\n      const content = inputBox.innerHTML;\n      if (!content && type === \"text\") {\n        this.$notify.error(\"请输入聊天内容\");\n        return;\n      }\n      return {\n        fromuser: this.fromUser,\n        fromavatar: this.user.avatar,\n        touser: this.toUser,\n        toavatar: this.toAvatar,\n        content: content,\n        type: type\n      };\n    },\n    handleFile(file) {\n      if (client) {\n        let message = this.getMessage(\"img\");\n        message.content = file.data;\n        console.log(message.content);\n        let extName = file.data.substring(file.data.lastIndexOf(\".\") + 1);\n        if ([\"png\", \"jpg\", \"jpeg\", \"gif\", \"bmp\", \"tiff\", \"svg\", \"webp\"].includes(extName)) {\n          message.type = \"img\";\n        } else if ([\"mp4\", \"avi\", \"mkv\", \"mov\", \"wmv\", \"flv\"].includes(extName)) {\n          message.type = \"video\";\n        } else {\n          message.type = \"file\";\n        }\n        client.send(JSON.stringify(message));\n      }\n    },\n    clickEmoji(emoji) {\n      document.getElementById(\"im-content\").innerHTML += emoji;\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        // 设置聊天滚动条到底部\n        let imMessageBox = document.getElementsByClassName(\"im-message-box\")[0];\n        //设置滚动条到最底部\n        imMessageBox.scrollTop = imMessageBox.scrollHeight;\n        console.log(\"触发滚动\");\n      });\n    },\n    don() {\n      if (!this.toUser) {\n        this.$notify.error(\"请选择聊天用户\");\n        return;\n      } else {\n        axios({\n          url: \"http://localhost:8080/api/imsingle/don?fromUser=\" + this.fromUser + \"&toUser=\" + this.toUser,\n          method: 'GET',\n          responseType: 'blob',\n          // 重要：设置响应类型为blob\n          headers: {\n            token: this.user.token // 在这里添加你的token\n          }\n        }).then(response => {\n          const blob = new Blob([response.data], {\n            type: 'application/octet-stream'\n          });\n          const link = document.createElement('a');\n          link.href = URL.createObjectURL(blob);\n          link.download = '聊天记录.xls'; // 设置下载文件名\n          link.click();\n        }).catch(error => {\n          console.error('下载文件时发生错误:', error);\n        });\n      }\n    },\n    showRecord() {\n      if (!this.toUser) {\n        this.$notify.error(\"请选择聊天用户\");\n        return;\n      }\n      this.recordingStatus = 'ready';\n    },\n    getWaveHeight() {\n      return Math.random() * 20 + 5; // 示例，实际根据音频数据调整\n    },\n    cancelRecording() {\n      this.recordingStatus = 'idle';\n      clearInterval(this.recordingInterval);\n      this.recordingInterval = null;\n      if (audioContext && audioContext.state !== 'closed') {\n        audioContext.close();\n      }\n      this.audioLevels = [];\n    },\n    startRecording() {\n      this.recordingStatus = 'recording';\n      this.recordingTime = 0;\n      audioChunks = [];\n      navigator.mediaDevices.getUserMedia({\n        audio: true\n      }).then(stream => {\n        mediaRecorder = new MediaRecorder(stream);\n        mediaRecorder.start();\n        mediaRecorder.ondataavailable = e => audioChunks.push(e.data);\n        audioContext = new AudioContext();\n        analyser = audioContext.createAnalyser();\n        microphone = audioContext.createMediaStreamSource(stream);\n        javascriptNode = audioContext.createScriptProcessor(2048, 1, 1);\n        analyser.smoothingTimeConstant = 0.3;\n        analyser.fftSize = 1024;\n        microphone.connect(analyser);\n        analyser.connect(javascriptNode);\n        javascriptNode.connect(audioContext.destination);\n        javascriptNode.onaudioprocess = () => {\n          const array = new Uint8Array(analyser.frequencyBinCount);\n          analyser.getByteFrequencyData(array);\n          const average = array.reduce((a, b) => a + b) / array.length;\n          this.audioLevels = Array.from({\n            length: 10\n          }, () => average / 2);\n        };\n        this.recordingInterval = setInterval(() => {\n          this.recordingTime += 0.1;\n        }, 100);\n      });\n    },\n    stopRecording() {\n      if (this.recordingStatus !== 'recording') return;\n      mediaRecorder.stop();\n      clearInterval(this.recordingInterval);\n      this.recordingInterval = null;\n      if (audioContext && audioContext.state !== 'closed') {\n        audioContext.close();\n      }\n      this.audioLevels = [];\n      if (this.recordingTime < 1) {\n        setTimeout(() => this.cancelRecording(), 1000);\n        this.$notify.error(\"按键时间太短\");\n        return;\n      }\n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(audioChunks, {\n          type: 'audio/mpeg'\n        });\n        const formData = new FormData();\n        formData.append('file', audioBlob, 'audio.mp3');\n        fetch('http://localhost:8080/api/files/upload', {\n          method: 'POST',\n          body: formData\n        }).then(response => response.json()).then(data => {\n          console.log(data);\n          if (!data.data) {\n            console.error(\"上传失败，服务器没有返回有效的URL\");\n            this.$notify.error(\"上传失败，服务器没有返回有效的URL\");\n            return;\n          }\n          let message = this.getMessage('audio');\n          message.content = data.data;\n          message.type = \"audio\";\n          client.send(JSON.stringify(message));\n          this.recordingStatus = 'idle';\n        }).catch(error => {\n          console.error(\"上传失败\", error);\n          this.$notify.error(\"上传失败\");\n        });\n      };\n    },\n    handleKeyDown(event) {\n      if (event.key === ' ') {\n        event.preventDefault();\n        if (this.recordingStatus === 'ready') {\n          this.startRecording();\n        }\n      } else if (event.key === 'Escape') {\n        this.cancelRecording();\n      }\n    },\n    handleKeyUp(event) {\n      if (event.key === ' ' && this.recordingStatus === 'recording') {\n        this.stopRecording();\n      }\n    }\n  }\n};","map":{"version":3,"names":["request","emojis","axios","client","mediaRecorder","audioChunks","audioContext","analyser","microphone","javascriptNode","data","user","permission","messages","users","fromUser","toUser","toAvatar","unRead","id","recordingStatus","recordingTime","recordingInterval","audioLevels","mounted","split","JSON","parse","localStorage","getItem","role","name","WebSocket","onopen","console","log","onclose","onmessage","msg","json","content","fromuser","touser","push","scrollToBottom","setUnReadNums","loadUnReadNums","load","get","params","pageNum","pageSize","then","res","list","$set","error","window","addEventListener","handleKeyDown","handleKeyUp","beforeDestroy","close","removeEventListener","methods","code","$notify","send","message","getMessage","stringify","document","getElementById","innerHTML","selectToUser","item","userName","userAvatar","download","file","open","type","inputBox","fromavatar","avatar","toavatar","handleFile","extName","substring","lastIndexOf","includes","clickEmoji","emoji","$nextTick","imMessageBox","getElementsByClassName","scrollTop","scrollHeight","don","url","method","responseType","headers","token","response","blob","Blob","link","createElement","href","URL","createObjectURL","click","catch","showRecord","getWaveHeight","Math","random","cancelRecording","clearInterval","state","startRecording","navigator","mediaDevices","getUserMedia","audio","stream","MediaRecorder","start","ondataavailable","e","AudioContext","createAnalyser","createMediaStreamSource","createScriptProcessor","smoothingTimeConstant","fftSize","connect","destination","onaudioprocess","array","Uint8Array","frequencyBinCount","getByteFrequencyData","average","reduce","a","b","length","Array","from","setInterval","stopRecording","stop","setTimeout","onstop","audioBlob","formData","FormData","append","fetch","body","event","key","preventDefault"],"sources":["src/views/ImSingle.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"main-body-content\">\r\n      <div style=\"display: flex; align-items: flex-start; height: 80vh;\">\r\n        <div style=\"\r\n            width: 200px;\r\n            border: 1px solid #ddd;\r\n            border-radius: 10px;\r\n            height: 100%;\">\r\n          <div style=\"\r\n              padding: 10px;\r\n              border-bottom: 1px solid #ddd;\r\n              color: #000;\r\n              background-color: #eee;\r\n              border-radius: 10px 10px 0 0;\r\n            \">\r\n            好友\r\n          </div>\r\n          <div class=\"user-list-box\">\r\n            <div class=\"user-list-item\" v-for=\"item in users.admin\" :key=\"item.id\" @click=\"selectToUser(item)\">\r\n              <img :src=\"item.userAvatar\" style=\"width: 30px; height: 30px; border-radius: 50%\" />\r\n              <span style=\"flex: 1; margin-left: 10px\"\r\n                :style=\"{ color: item.role + '_' + item.userName === toUser ? '#3a8ee6' : '', }\">{{ item.userName }}\r\n              </span>\r\n              <div class=\"user-list-item-badge\" v-if=\"unRead?.[item.role + '_' + item.userName]\">\r\n                {{ unRead?.[item.role + \"_\" + item.userName] }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <!--  中间部分  -->\r\n        <div style=\"\r\n            flex: 1;\r\n            border: 1px solid #ddd;\r\n            border-radius: 5px;\r\n            background-color: #f1f1f1;\r\n            margin: 0 10px;\r\n            height: 100%;\r\n            display: flex;\r\n            flex-direction: column;\r\n            border-radius: 10px;\r\n            \">\r\n          <div style=\"\r\n              padding: 20px 0;\r\n              text-align: center;\r\n              border-bottom: 1px solid #ddd;\r\n              color: #000;\r\n              background-color: #eee;\r\n              height: 60px;\r\n              border-radius: 10px 10px 0 0;\r\n            \">\r\n            {{ toUser?.substring(toUser.indexOf(\"_\") + 1) }}\r\n          </div>\r\n          <div class=\"im-message-box\">\r\n            <div v-for=\"item in messages\" :key=\"item.id\">\r\n              <!--  右边的气泡 -->\r\n              <div style=\"\r\n                  display: flex;\r\n                  flex-direction: row-reverse;\r\n                  align-items: flex-start;\r\n                \" v-if=\"item.fromuser === fromUser\">\r\n                <img :src=\"item.fromavatar\" alt=\"\" style=\"\r\n                    width: 40px;\r\n                    height: 40px;\r\n                    border-radius: 50%;\r\n                    margin-left: 10px;\r\n                  \" />\r\n                <div class=\"im-message im-message-right\" v-html=\"item.content\" v-if=\"item.type === 'text'\"></div>\r\n                <div class=\"im-message\" style=\"padding: 0\" v-if=\"item.type === 'img'\">\r\n                  <!-- 注意  el-image 的load函数必须加上，否则无法触发滚动条到最底端 -->\r\n                  <el-image style=\"width: 100px\" :src=\"item.content\" alt=\"\" :preview-src-list=\"[item.content]\"\r\n                    @load=\"scrollToBottom\"></el-image>\r\n                </div>\r\n                <div class=\"im-message\" v-if=\"item.type === 'video'\">\r\n                  <video controls style=\"width: 100%\" :src=\"item.content\" @loadeddata=\"scrollToBottom\"></video>\r\n                </div>\r\n                <div class=\"im-message im-message-download\" v-if=\"item.type === 'file'\" @click=\"download(item.content)\">\r\n                  <div>\r\n                    <i class=\"el-icon-folder-opened\"></i>\r\n                    <span>{{ item.content.substring(item.content.indexOf(\"-\") + 1) }}</span>\r\n                  </div>\r\n                </div>\r\n                <div class=\"im-message\" style=\"padding: 0\" v-if=\"item.type === 'audio'\">\r\n                  <audio controls :src=\"item.content\"></audio>\r\n                </div>\r\n              </div>\r\n\r\n              <!--  左边的气泡 -->\r\n              <div style=\"display: flex; align-items: flex-start\" v-else>\r\n                <img :src=\"item.fromavatar\" alt=\"\" style=\"\r\n                    width: 40px;\r\n                    height: 40px;\r\n                    border-radius: 50%;\r\n                    margin-right: 10px;\r\n                  \" />\r\n                <div style=\"width: 100%\">\r\n                  <div style=\"color: #888; font-size: 12px; width: 50%\">\r\n                    {{ item.fromuser?.substring(item.fromuser.indexOf(\"_\") + 1) }}\r\n                  </div>\r\n                  <div class=\"im-message im-message-left\" v-html=\"item.content\" v-if=\"item.type === 'text'\"></div>\r\n                  <div class=\"im-message\" style=\"padding: 0\" v-if=\"item.type === 'img'\">\r\n                    <!-- 注意  el-image 的load函数必须加上，否则无法触发滚动条到最底端 -->\r\n                    <el-image style=\"width: 100px\" :src=\"item.content\" alt=\"\" :preview-src-list=\"[item.content]\"\r\n                      @load=\"scrollToBottom\"></el-image>\r\n                  </div>\r\n                  <div class=\"im-message\" v-if=\"item.type === 'video'\">\r\n                    <video controls style=\"width: 100%\" :src=\"item.content\" @loadeddata=\"scrollToBottom\"></video>\r\n                  </div>\r\n                  <div class=\"im-message im-message-download\" v-if=\"item.type === 'file'\"\r\n                    @click=\"download(item.content)\">\r\n                    <div>\r\n                      <i class=\"el-icon-folder-opened\"></i>\r\n                      <span>{{ item.content.substring(item.content.indexOf(\"-\") + 1) }}</span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"im-message\" style=\"padding: 0\" v-if=\"item.type === 'audio'\">\r\n                    <audio controls :src=\"item.content\"></audio>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- 输入区域 -->\r\n          <div style=\"\r\n              padding: 10px 5px;\r\n              border-top: 1px solid #ddd;\r\n              display: flex;\r\n              align-items: center;\r\n              width: 100%;\r\n            \">\r\n            <el-popover placement=\"top\" width=\"300\" trigger=\"click\">\r\n              <div class=\"emoji-box\">\r\n                <span v-for=\"(item, index) in emojis\" :key=\"index\"\r\n                  style=\"margin-right: 5px; font-size: 20px; cursor: pointer\" v-html=\"item\" @click=\"clickEmoji(item)\">\r\n                </span>\r\n              </div>\r\n              <i slot=\"reference\" class=\"fa fa-smile-o\" style=\"font-size: 22px; color: #666\"></i>\r\n            </el-popover>\r\n            <div style=\"margin-left: 5px\">\r\n              <el-upload action=\"http://localhost:8080/api/files/upload\" :show-file-list=\"false\"\r\n                :on-success=\"handleFile\">\r\n                <i class=\"fa fa-folder-open-o\" style=\"font-size: 20px; color: #666\"></i>\r\n              </el-upload>\r\n            </div>\r\n            <div style=\"margin-left: 5px\">\r\n              <i class=\"fa fa-microphone\" style=\"font-size: 22px; color: #666; cursor: pointer;\"\r\n                @click=\"showRecord\"></i>\r\n            </div>\r\n            <div id=\"im-content\" contenteditable style=\"\r\n                flex: 1;\r\n                background-color: #fff;\r\n                margin: 0 5px;\r\n                padding: 10px;\r\n                border: 1px solid #ddd;\r\n                border-radius: 2px;\r\n                outline: none;\r\n                font-size: 14px;\r\n              \"></div>\r\n            <el-button type=\"primary\" @click=\"don\" style=\"border: none\">下载聊天记录\r\n            </el-button>\r\n            <el-button type=\"primary\" @click=\"send\" style=\"border: none\">发送\r\n            </el-button>\r\n          </div>\r\n        </div>\r\n        <!--  中间部分结束  -->\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 录音弹出层 -->\r\n    <div v-if=\"recordingStatus !== 'idle'\" class=\"recording-overlay\">\r\n      <div class=\"recording-box\" style=\"margin-left: 30%;\">\r\n        <div v-if=\"recordingStatus === 'ready'\">\r\n          <i class=\"fa fa-microphone\" style=\"font-size: 100px; color: #0e81de; cursor: pointer;\"></i>\r\n          <p>按住空格键开始说话，按Esc键或点击<a @click=\"cancelRecording\" class=\"cancel-link\">退出</a></p>\r\n        </div>\r\n        <div v-if=\"recordingStatus === 'recording'\">\r\n          <p>{{ recordingTime.toFixed(1) }}s</p>\r\n          <div class=\"microphone-animation\">\r\n            <div class=\"wave\" v-for=\"i in 10\" :key=\"i\" :style=\"{ height: getWaveHeight() + 'px' }\"></div>\r\n          </div>\r\n          <p>松手发送，按Esc键或点击<a @click=\"cancelRecording\" class=\"cancel-link\">取消发送</a></p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";\r\nimport emojis from \"@/assets/emoji\";\r\nimport axios from 'axios';\r\n\r\nlet client;\r\nlet mediaRecorder;\r\nlet audioChunks = [];\r\nlet audioContext, analyser, microphone, javascriptNode;\r\nexport default {\r\n  data() {\r\n    return {\r\n      user: {},\r\n      permission: [],\r\n      emojis: [],\r\n      messages: [],\r\n      users: {},\r\n      fromUser: \"\",\r\n      toUser: \"\",\r\n      toAvatar: \"\",\r\n      unRead: {},\r\n      id: \"\",\r\n      recordingStatus: 'idle',\r\n      recordingTime: 0,\r\n      recordingInterval: null,\r\n      audioLevels: []\r\n    };\r\n  },\r\n  // 页面加载的时候，做一些事情，在created里面\r\n  mounted() {\r\n    this.emojis = emojis.split(\",\");\r\n    this.user = JSON.parse(localStorage.getItem(\"user\") || \"{}\");\r\n    this.fromUser = this.user.role + \"_\" + this.user.name;\r\n\r\n    client = new WebSocket(`ws://localhost:8080/imserverSingle`);\r\n\r\n    client.onopen = () => {\r\n      console.log(\"websocket open\");\r\n    };\r\n    client.onclose = () => {\r\n      // 页面刷新的时候和后台websocket服务关闭的时候\r\n      console.log(\"websocket close\");\r\n    };\r\n\r\n    client.onmessage = (msg) => {\r\n      if (msg.data) {\r\n        let json = JSON.parse(msg.data);\r\n        if (\r\n          (json.content &&\r\n            json.fromuser === this.fromUser &&\r\n            json.touser === this.toUser) ||\r\n          (json.touser === this.fromUser && json.fromuser === this.toUser)\r\n        ) {\r\n          // 聊天消息\r\n          this.messages.push(json);\r\n          this.scrollToBottom(); // 滚动页面到最底部\r\n        }\r\n        // 加载消息数字\r\n        if (this.toUser === json.fromuser) {\r\n          this.setUnReadNums(); // 清空正在聊天人的消息数字\r\n        } else {\r\n          this.loadUnReadNums();\r\n        }\r\n      }\r\n    };\r\n\r\n    // 加载聊天数据\r\n    this.load();\r\n\r\n    request.get(\"/hy/list\", { params: { pageNum: 1, pageSize: 1000 } }).then((res) => {\r\n      if (res.data && res.data.list) {\r\n        this.$set(this.users, \"admin\", res.data.list);\r\n      } else {\r\n        console.error(\"Failed to load user list\");\r\n      }\r\n    });\r\n\r\n    // 添加键盘事件监听\r\n    window.addEventListener('keydown', this.handleKeyDown);\r\n    window.addEventListener('keyup', this.handleKeyUp);\r\n  },\r\n\r\n  beforeDestroy() {\r\n    if (client) {\r\n      client.close();\r\n    }\r\n    // 移除键盘事件监听\r\n    window.removeEventListener('keydown', this.handleKeyDown);\r\n    window.removeEventListener('keyup', this.handleKeyUp);\r\n  },\r\n\r\n  // 定义一些页面上控件触发的事件调用的方法\r\n  methods: {\r\n    load() {\r\n      request\r\n        .get(\"/imsingle?fromUser=\" + this.fromUser + \"&toUser=\" + this.toUser)\r\n        .then((res) => {\r\n          if (res.code === \"0\") {\r\n            console.log(res);\r\n            this.messages = res.data;\r\n            this.scrollToBottom(); // 滚动条滚动到最底部\r\n          } else {\r\n            this.$notify.error(res.msg);\r\n          }\r\n          this.loadUnReadNums();\r\n        });\r\n    },\r\n    setUnReadNums() {\r\n      request\r\n        .get(\"/imsingle?fromUser=\" + this.fromUser + \"&toUser=\" + this.toUser)\r\n        .then((res) => {\r\n          this.loadUnReadNums();\r\n        });\r\n    },\r\n    loadUnReadNums() {\r\n      // 查询未读数量\r\n      request\r\n        .get(\"/imsingle/unReadNums?toUsername=\" + this.fromUser)\r\n        .then((res) => {\r\n          this.unRead = res.data;\r\n        });\r\n    },\r\n    send() {\r\n      if (!this.toUser) {\r\n        this.$notify.error(\"请选择聊天用户\");\r\n        return;\r\n      }\r\n      if (client) {\r\n        let message = this.getMessage(\"text\");\r\n        client.send(JSON.stringify(message));\r\n      }\r\n      document.getElementById(\"im-content\").innerHTML = \"\"; // 清空输入框\r\n    },\r\n    selectToUser(item) {\r\n      this.toUser = item.role + \"_\" + item.userName;\r\n      this.toAvatar = item.userAvatar;\r\n      //查询聊天记录\r\n      this.load();\r\n    },\r\n    download(file) {\r\n      window.open(file);\r\n    },\r\n    getMessage(type) {\r\n      let inputBox = document.getElementById(\"im-content\");\r\n      const content = inputBox.innerHTML;\r\n      if (!content && type === \"text\") {\r\n        this.$notify.error(\"请输入聊天内容\");\r\n        return;\r\n      }\r\n      return {\r\n        fromuser: this.fromUser,\r\n        fromavatar: this.user.avatar,\r\n        touser: this.toUser,\r\n        toavatar: this.toAvatar,\r\n        content: content,\r\n        type: type,\r\n      };\r\n    },\r\n    handleFile(file) {\r\n      if (client) {\r\n        let message = this.getMessage(\"img\");\r\n        message.content = file.data;\r\n        console.log(message.content);\r\n        let extName = file.data.substring(file.data.lastIndexOf(\".\") + 1);\r\n        if (\r\n          [\"png\", \"jpg\", \"jpeg\", \"gif\", \"bmp\", \"tiff\", \"svg\", \"webp\"].includes(\r\n            extName\r\n          )\r\n        ) {\r\n          message.type = \"img\";\r\n        } else if (\r\n          [\"mp4\", \"avi\", \"mkv\", \"mov\", \"wmv\", \"flv\"].includes(\r\n            extName\r\n          )\r\n        ) {\r\n          message.type = \"video\";\r\n        } else {\r\n          message.type = \"file\";\r\n        }\r\n        client.send(JSON.stringify(message));\r\n\r\n      }\r\n    },\r\n    clickEmoji(emoji) {\r\n      document.getElementById(\"im-content\").innerHTML += emoji;\r\n    },\r\n    scrollToBottom() {\r\n      this.$nextTick(() => {\r\n        // 设置聊天滚动条到底部\r\n        let imMessageBox = document.getElementsByClassName(\"im-message-box\")[0];\r\n        //设置滚动条到最底部\r\n        imMessageBox.scrollTop = imMessageBox.scrollHeight;\r\n        console.log(\"触发滚动\");\r\n      });\r\n    },\r\n    don() {\r\n      if (!this.toUser) {\r\n        this.$notify.error(\"请选择聊天用户\");\r\n        return;\r\n      } else {\r\n        axios({\r\n          url: \"http://localhost:8080/api/imsingle/don?fromUser=\" + this.fromUser + \"&toUser=\" + this.toUser,\r\n          method: 'GET',\r\n          responseType: 'blob', // 重要：设置响应类型为blob\r\n          headers: {\r\n            token: this.user.token  // 在这里添加你的token\r\n          }\r\n        }).then((response) => {\r\n          const blob = new Blob([response.data], { type: 'application/octet-stream' });\r\n          const link = document.createElement('a');\r\n          link.href = URL.createObjectURL(blob);\r\n          link.download = '聊天记录.xls'; // 设置下载文件名\r\n          link.click();\r\n        }).catch((error) => {\r\n          console.error('下载文件时发生错误:', error);\r\n        });\r\n      }\r\n    },\r\n    showRecord() {\r\n      if (!this.toUser) {\r\n        this.$notify.error(\"请选择聊天用户\");\r\n        return;\r\n      }\r\n      this.recordingStatus = 'ready';\r\n    },\r\n    getWaveHeight() {\r\n      return Math.random() * 20 + 5; // 示例，实际根据音频数据调整\r\n    },\r\n\r\n    cancelRecording() {\r\n      this.recordingStatus = 'idle';\r\n      clearInterval(this.recordingInterval);\r\n      this.recordingInterval = null;\r\n      if (audioContext && audioContext.state !== 'closed') {\r\n        audioContext.close();\r\n      }\r\n      this.audioLevels = [];\r\n    },\r\n\r\n    startRecording() {\r\n      this.recordingStatus = 'recording';\r\n      this.recordingTime = 0;\r\n      audioChunks = [];\r\n\r\n      navigator.mediaDevices.getUserMedia({ audio: true })\r\n        .then(stream => {\r\n          mediaRecorder = new MediaRecorder(stream);\r\n          mediaRecorder.start();\r\n          mediaRecorder.ondataavailable = e => audioChunks.push(e.data);\r\n\r\n          audioContext = new AudioContext();\r\n          analyser = audioContext.createAnalyser();\r\n          microphone = audioContext.createMediaStreamSource(stream);\r\n          javascriptNode = audioContext.createScriptProcessor(2048, 1, 1);\r\n\r\n          analyser.smoothingTimeConstant = 0.3;\r\n          analyser.fftSize = 1024;\r\n\r\n          microphone.connect(analyser);\r\n          analyser.connect(javascriptNode);\r\n          javascriptNode.connect(audioContext.destination);\r\n\r\n          javascriptNode.onaudioprocess = () => {\r\n            const array = new Uint8Array(analyser.frequencyBinCount);\r\n            analyser.getByteFrequencyData(array);\r\n            const average = array.reduce((a, b) => a + b) / array.length;\r\n            this.audioLevels = Array.from({ length: 10 }, () => average / 2);\r\n          };\r\n\r\n          this.recordingInterval = setInterval(() => {\r\n            this.recordingTime += 0.1;\r\n          }, 100);\r\n        });\r\n    },\r\n\r\n    stopRecording() {\r\n      if (this.recordingStatus !== 'recording') return;\r\n\r\n      mediaRecorder.stop();\r\n      clearInterval(this.recordingInterval);\r\n      this.recordingInterval = null;\r\n\r\n      if (audioContext && audioContext.state !== 'closed') {\r\n        audioContext.close();\r\n      }\r\n      this.audioLevels = [];\r\n\r\n      if (this.recordingTime < 1) {\r\n        setTimeout(() => this.cancelRecording(), 1000);\r\n        this.$notify.error(\"按键时间太短\");\r\n        return;\r\n      }\r\n\r\n      mediaRecorder.onstop = () => {\r\n        const audioBlob = new Blob(audioChunks, { type: 'audio/mpeg' });\r\n        const formData = new FormData();\r\n        formData.append('file', audioBlob, 'audio.mp3');\r\n\r\n        fetch('http://localhost:8080/api/files/upload', {\r\n          method: 'POST',\r\n          body: formData\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            console.log(data);\r\n            if (!data.data) {\r\n              console.error(\"上传失败，服务器没有返回有效的URL\");\r\n              this.$notify.error(\"上传失败，服务器没有返回有效的URL\");\r\n              return;\r\n            }\r\n            let message = this.getMessage('audio');\r\n            message.content = data.data;\r\n            message.type = \"audio\";\r\n            client.send(JSON.stringify(message));\r\n            this.recordingStatus = 'idle';\r\n          })\r\n          .catch(error => {\r\n            console.error(\"上传失败\", error);\r\n            this.$notify.error(\"上传失败\");\r\n          });\r\n      };\r\n    },\r\n\r\n    handleKeyDown(event) {\r\n      if (event.key === ' ') {\r\n        event.preventDefault();\r\n        if (this.recordingStatus === 'ready') {\r\n          this.startRecording();\r\n        }\r\n      } else if (event.key === 'Escape') {\r\n        this.cancelRecording();\r\n      }\r\n    },\r\n\r\n    handleKeyUp(event) {\r\n      if (event.key === ' ' && this.recordingStatus === 'recording') {\r\n        this.stopRecording();\r\n      }\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.im-message-box {\r\n  height: calc(100vh - 250px);\r\n  padding: 10px;\r\n  overflow-y: auto;\r\n  background-color: white;\r\n}\r\n\r\n.emoji-box {\r\n  height: 200px;\r\n  overflow-y: scroll;\r\n  line-height: 30px;\r\n}\r\n\r\n.user-list-box {\r\n  height: calc(100vh - 185px);\r\n  overflow-y: auto;\r\n}\r\n\r\n.im-message-box::-webkit-scrollbar,\r\n.emoji-box::-webkit-scrollbar,\r\n.user-list-box::-webkit-scrollbar {\r\n  width: 4px;\r\n}\r\n\r\n.im-message-box::-webkit-scrollbar-thumb,\r\n.emoji-box::-webkit-scrollbar-thumb,\r\n.user-list-box::-webkit-scrollbar-thumb {\r\n  border-radius: 10px;\r\n  background: rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.im-message-box::-webkit-scrollbar-track,\r\n.emoji-box::-webkit-scrollbar-track,\r\n.user-list-box::-webkit-scrollbar-track {\r\n  border-radius: 0;\r\n  background: rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.im-message {\r\n  font-size: 14px;\r\n  padding: 10px;\r\n  margin: 5px 0;\r\n  border-radius: 5px;\r\n  color: #000;\r\n  max-width: 50%;\r\n  line-height: 20px;\r\n  width: fit-content;\r\n}\r\n\r\n.im-message-left {\r\n  background-color: #fff;\r\n}\r\n\r\n.im-message-right {\r\n  background-color: #26d470;\r\n}\r\n\r\n.im-message-download {\r\n  background-color: #dbedff;\r\n  cursor: pointer;\r\n}\r\n\r\n.user-list-item {\r\n  display: flex;\r\n  padding: 10px;\r\n  align-items: center;\r\n  border-bottom: 1px solid #eee;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n}\r\n\r\n.user-list-item-badge {\r\n  padding: 2px 6px;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 12px;\r\n  color: white;\r\n  background-color: red;\r\n}\r\n\r\n.user-list-item:nth-last-child(1) {\r\n  border: none;\r\n}\r\n\r\n.recording-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.recording-box {\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  text-align: center;\r\n}\r\n\r\n.microphone-icon {\r\n  width: 24px;\r\n  height: 36px;\r\n  background-color: #0e81de;\r\n  border-radius: 12px 12px 4px 4px;\r\n  position: relative;\r\n  margin: 0 auto;\r\n}\r\n\r\n.microphone-icon::before {\r\n  content: '';\r\n  position: absolute;\r\n  bottom: -6px;\r\n  left: 50%;\r\n  width: 16px;\r\n  height: 4px;\r\n  background-color: #0e81de;\r\n  border-radius: 2px;\r\n  transform: translateX(-50%);\r\n}\r\n\r\n.microphone-icon::after {\r\n  content: '';\r\n  position: absolute;\r\n  bottom: -20px;\r\n  left: 50%;\r\n  width: 4px;\r\n  height: 14px;\r\n  background-color: #0e81de;\r\n  border-radius: 2px;\r\n  transform: translateX(-50%);\r\n}\r\n\r\n.microphone-animation {\r\n  width: 50px;\r\n  height: 50px;\r\n  margin: 0 auto;\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-end;\r\n}\r\n\r\n.wave {\r\n  width: 5px;\r\n  background-color: #3a8ee6;\r\n  display: inline-block;\r\n  margin: 0 1px;\r\n  animation: wave 1s infinite;\r\n}\r\n\r\n@keyframes wave {\r\n  0% {\r\n    transform: scaleY(1);\r\n  }\r\n\r\n  50% {\r\n    transform: scaleY(1.5);\r\n  }\r\n\r\n  100% {\r\n    transform: scaleY(1);\r\n  }\r\n}\r\n\r\n.cancel-link {\r\n  color: #3a8ee6;\r\n  cursor: pointer;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}